// ================ FILE 1: Assignment8.cpp =======================
#include "FHsort.h"
#include "FHvector.h"
#include <time.h>
#include <cstdlib>
#include <iostream>
#include <iomanip>
using namespace std;

// public driver
template <typename Comparable>
void quickSortX(FHvector<Comparable> & vector, int recLimit) {
    if (recLimit <= 1) {
        recLimit = 2;
    }
    quickSortX(vector, 0, vector.size() - 1, recLimit);
}

template <typename Comparable>
void quickSortX(FHvector<Comparable> & vector, int left, int right, int recLimit) {
    Comparable pivot;
    int i, j;

    if (left + recLimit <= right)
    {
        pivot = median3(vector, left, right);
        for (i = left, j = right - 1; ; )
        {
            while (vector[++i] < pivot)
                ;
            while (pivot < vector[--j])
                ;
            if (i < j)
                mySwapFH(vector[i], vector[j]);
            else
                break;
        }

        mySwapFH(vector[i], vector[right - 1]);  // restore pivot

         // recursive calls on smaller sub-groups
        quickSortX(vector, left, i - 1, recLimit);
        quickSortX(vector, i + 1, right, recLimit);
    }
    else
        // non-recursive escape valve - insertionSort
        insertionSort(vector, left, right);
}

int main()
{
    const int SIZE = 90000;
    FHvector<int> masterVector;
    FHvector<int> copyVector;
    clock_t startTime, stopTime;
    srand(time(NULL));
    int randomNum;

    // fill vectorOfInts with random values
    for (int i = 0; i < SIZE; i++) {
        masterVector.push_back(rand() % SIZE);
    }

    cout << "Vector size: " << SIZE << endl;
    cout << "=================================" << endl;
    cout << "| RECURSIVE LIMIT |     TIME    |" << endl;
    cout << "=================================" << endl;

    // increase the recLimit by 2 each time until we hit 300
    for (int x = 2; x <= 300; x += 2) {

        // reset the vector
        for (int i = 0; i < SIZE; i++) {
            copyVector.push_back(masterVector[i]);
        }

        startTime = clock();
        quickSortX(copyVector, x);
        stopTime = clock();
        cout << "|    " << setw(7) << x << "      |"<< "    "
            << setw(5) << (double)(stopTime - startTime) / (double)CLOCKS_PER_SEC
            << "s   |" << endl;
        cout << "=================================" << endl;

    }
    return 0;

}

// ================ RUN OUTPUT ====================================
/*
Vector size: 10000 		   
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================		
|          2      |    0.008s   |
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.021s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |    0.049s   |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.079s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |    0.494s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |    0.733s   |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    0.834s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |     1.04s   |		
=================================		

Vector size: 20000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.016s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.046s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |    0.101s   |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.191s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |    1.105s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |    1.595s   |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    1.796s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    2.179s   |		
=================================

Vector size: 30000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.024s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.069s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |    0.155s   |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.26s    |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |    1.596s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |    2.35s    |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    2.656s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    3.221s   |
=================================

Vector size: 40000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.034s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.095s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |    0.155s   |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.212s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |    1.596s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |     2.145s  |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    3.604s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    4.347s   |
=================================

Vector size: 50000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.044s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.119s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |    0.263s   |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.438s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |     2.705s  |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |     4.043s  |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    4.526s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    5.452s   |
=================================

Vector size: 60000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.051s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.149s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |    0.263s   |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.545s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |     3.321s  |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |     4.882s  |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    5.544s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    6.788s   |
=================================

Vector size: 70000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.061s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.181s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |     0.392s   |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.688s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |     3.937s  |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |     5.919s  |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    6.692s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    8.068s   |
=================================

Vector size: 80000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.069s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.198s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |     0.448s  |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.747s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |      4.483s |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |     6.43s   |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |    7.413s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    8.872s   |
=================================

Vector size: 90000			
=================================		
| RECURSIVE LIMIT |     TIME    |
=================================			
|          2      |    0.079s   |			
=================================		
|       (...)     |   (...)     |
=================================		
|          6      |    0.229s   |
=================================		
|       (...)     |   (...)     |
=================================				
|         14      |     0.498s  |		
=================================		
|       (...)     |   (...)     |
=================================
|         24      |    0.815s   |		
=================================		
|       (...)     |   (...)     |
=================================		
|        150      |      4.97s  |		
=================================		
|       (...)     |   (...)     |
=================================		
|        220      |     7.327s  |
=================================		
|       (...)     |   (...)     |
=================================		
|        250      |     8.312s  |		
=================================		
|       (...)     |   (...)     |
=================================		
|        300      |    10.091s  |
=================================

Quicksort sorts an array by first locating a pivot then sorting the rest of
the rest of the array into two parts: elements that are larger than the
pivot and elements that are smaller that the pivot. Quicksort is then 
recusively called on the subarray containing elements smaller than the 
pivot and again on the subarray containing elements larger than the 
pivot. This recursion continues until we get an array size equal to
the recursion limit. Once the recursion limit has been hit, instead of 
performing additional quickSort operations, we perform insertionSorts to 
optimize performance. The reason we use insertionSorts at this point is
because there may be additional overhead involved with performing the 
quickSort that is not present in the insertionSort. Due to this, sorting
at the lower levels in the recursion may be quicker with insertionSort
than quickSort. 

From the testing, quickSort is begins to level off (not perform as fast as
other levels of the recursion) at recursion limit 6 to 24. This is most likely
due to the recursive overhead in quickSort. At recursive limits less than 8,
the times pick up once again (due to insertionSort taking over). It is also 
as expected to see larger times for higher recursive limits since at
that point, insertionSort will kick in quicker, not allowing quickSort to be
fully optimized until we hit the "leveling off" zone (6 to 24).
*/
