// Assignment 1: The Subset-Sum Problem
// Aaryan Singh 
// Student ID 20402279
//------------- PART A -----------------
#include <iostream>
#include <vector>
#include "iTunes.h"
using namespace std;

class Sublist
{
public:
    Sublist(vector<int> *orig = NULL);
    Sublist addItem(int indexOfItemToAdd);
    void showSublist();
    int getSum() const;

private:
    int sum;
    vector<int> *originalObjects;
    vector<int> indices;
};

Sublist::Sublist(vector<int> *orig) : sum(0), originalObjects(orig) { }

Sublist Sublist::addItem(int indexOfItemToAdd) {
    Sublist copyOfObjects = *this;
    copyOfObjects.indices.push_back(indexOfItemToAdd);
    copyOfObjects.sum = sum + originalObjects->at(indexOfItemToAdd);
    return copyOfObjects;
}

void Sublist::showSublist() {
    vector<int>::iterator indexIter;
    int counter = 0;
    cout << "Sublist -----------------------------" << endl;
    cout << "\t sum:" << sum << endl;
    for (indexIter = indices.begin(); indexIter != indices.end(); indexIter++) {
        cout << "array[" << counter << "] = " << originalObjects->at(*indexIter) << endl;
        counter++;
    }
}

int Sublist::getSum() const { return sum; }

int main() {
    int TARGET = 180;
    vector<int> dataSet;
    vector<Sublist> choices;
    vector<Sublist>::iterator iter, iterBest;
    int k, j, max, numSets, maxSum;
    bool foundPerfect;
    dataSet.push_back(20); dataSet.push_back(12); dataSet.push_back(22);
    dataSet.push_back(15); dataSet.push_back(25);
    dataSet.push_back(19); dataSet.push_back(29);
    dataSet.push_back(18);
    dataSet.push_back(11); dataSet.push_back(13); dataSet.push_back(17);
    choices.clear();
    cout << "Target time: " << TARGET << endl;

    // 1. initialize the choices with an empty sublist
    choices.push_back(Sublist(&dataSet));

    //2. loop over all elements in the dataSet

    vector<int>::iterator dataSetIter;
    maxSum = 0;
    numSets = 1;
    foundPerfect = false;
    
    for (dataSetIter = dataSet.begin(); dataSetIter != dataSet.end(); dataSetIter++) {
        maxSum += *dataSetIter;
    }

    if (maxSum < TARGET) {
        cout << "TARGET is larger than sum of entire list (" << maxSum << ")." << endl;
        return 0;
    }

    int count = 0;
    for (k = 0; k < dataSet.size(); k++) {
        numSets += count;
        count = 0;
        for (j = 0; j < numSets; j++) {
            if (choices[j].getSum() + dataSet[k] == TARGET) {
                choices.push_back(choices[j].addItem(k));
                foundPerfect = true;
                break;
            }
            if (choices[j].getSum() + dataSet[k] < TARGET) {
                choices.push_back(choices[j].addItem(k));
                count++;
            }
        }
        if (foundPerfect) {
            break;
        }
    }

    // 3. of all the sublists, find the one with the largest sum
    max = 0;
    for (iter = choices.begin(); iter != choices.end(); iter++) {
        if (iter->getSum() == TARGET) {
            iterBest = iter;
            break;
        }
        if (iter->getSum() >= max) {
            max = iter->getSum();
            iterBest = iter;
        }
    }

    iterBest->showSublist();
    return 0;
}

--------------- OUTPUT -----------------
RUN 1:
Target time: 180
Sublist -----------------------------
         sum:179
array[0] = 20
array[1] = 12
array[2] = 15
array[3] = 25
array[4] = 19
array[5] = 29
array[6] = 18
array[7] = 11
array[8] = 13
array[9] = 17

RUN 2:
Target time: 75
Sublist -----------------------------
         sum:75
array[0] = 12
array[1] = 15
array[2] = 19
array[3] = 29

RUN 3:
Target time: 148
Sublist -----------------------------
         sum:148
array[0] = 20
array[1] = 22
array[2] = 15
array[3] = 25
array[4] = 19
array[5] = 29
array[6] = 18

RUN WITH TARGET GREATER THAN SUM OF ALL ELEMENTS:
Target time: 521
TARGET is larger than sum of entire list (201).

RUN WITHOUT MEETING TARGET:
Target time: 6
Sublist -----------------------------
         sum:0
         
//------------- PART B -----------------
#include <iostream>
#include <vector>
#include "iTunes.h"
using namespace std;

class Sublist
{
    public:
        Sublist(vector<iTunesEntry> *orig = NULL);
        Sublist addItem(int indexOfItemToAdd);
        void showSublist();
        int getSum() const;
        friend ostream & operator<< (ostream& stream, iTunesEntry entry);
        friend int operator+ (int n, iTunesEntry entry);

    private:
        int sum;
        vector<iTunesEntry> *originalObjects;
        vector<int> indices;
};

Sublist::Sublist(vector<iTunesEntry> *orig) : sum(0), originalObjects(orig) { }

Sublist Sublist::addItem(int indexOfItemToAdd) {
    Sublist copyOfObjects = *this;
    copyOfObjects.indices.push_back(indexOfItemToAdd);
    copyOfObjects.sum = sum + originalObjects->at(indexOfItemToAdd);
    return copyOfObjects;
}

void Sublist::showSublist() {
    vector<int>::iterator indexIter;
    int counter = 0;
    cout << "Sublist -----------------------------" << endl;
    cout << "\t sum:" << sum << endl;
    for (indexIter = indices.begin(); indexIter != indices.end(); indexIter++) {
        iTunesEntry * curr = &originalObjects->at(*indexIter);
        cout << "array[" << counter << "] = " << *curr << endl;
        counter++;
    }
}

int Sublist::getSum() const { return sum; }

ostream& operator <<(ostream& stream, iTunesEntry entry) {
    stream << entry.getTitle() << " by " << entry.getArtist() << "(" << entry.getTime() << ")";
    return stream;
}

int operator+ (int n, iTunesEntry entry) {
    return n + entry.getTime();
}

int main()
{
    const int TARGET = 3600;
    int sum = 0;
    vector<iTunesEntry> dataSet;
    vector<Sublist> choices;
    vector<Sublist>::iterator iter, iterBest;
    int numSets, max, array_size, maxSum;
    bool foundPerfect;
    // read the data
    iTunesEntryReader tunes_input("itunes_file.txt");
    if (tunes_input.readError()) {
        cout << "couldn't open " << tunes_input.getFileName()
            << " for input.\n";
        exit(1);
    }
    
    // time the algorithm -------------------------
    clock_t startTime, stopTime;
    startTime = clock();
    // create a vector of objects for our own use:
    array_size = tunes_input.getNumTunes();
    for (int k = 0; k < array_size; k++)
        dataSet.push_back(tunes_input[k]);
    cout << "Target time: " << TARGET << endl;

    // code provided by student
    // initialize choices with an empty sublist
    choices.push_back(Sublist(&dataSet));
    
    // if the sum of the dataSet < TARGET do not go into the loop
    vector<iTunesEntry>::iterator dataSetIter;
    maxSum = 0;
    numSets = 1;
    foundPerfect = false;
    
    for (dataSetIter = dataSet.begin(); dataSetIter != dataSet.end(); dataSetIter++) {
        maxSum = maxSum + *dataSetIter;
    }

    // loop over all elements in the dataSet
    if (maxSum < TARGET) {
        cout << "TARGET is larger than sum of entire list (" << maxSum << ")." << endl;
        return 0;
    }
    
    int count = 0;
    for (int k = 0; k < dataSet.size(); k++) {
        numSets += count;
        count = 0;
        for (int j = 0; j < numSets; j++) {
            if (choices[j].getSum() + dataSet[k] == TARGET) {
                choices.push_back(choices[j].addItem(k));
                foundPerfect = true;
                break;
            }
            if (choices[j].getSum() + dataSet[k] < TARGET) {
                choices.push_back(choices[j].addItem(k));
                count++;
            }
        }
        if (foundPerfect) {
            break;
            }
        }

    // of all the sublists, find the one with the largest sum
    max = 0;
    for (iter = choices.begin(); iter != choices.end(); iter++) {
        if (iter->getSum() == TARGET) {
            iterBest = iter;
            break;
        }
        if (iter->getSum() >= max) {
	    max = iter->getSum();
	    iterBest = iter;
	}
    }

    iterBest->showSublist();
    // how we determine the time elapsed -------------------
    stopTime = clock();
    // report algorithm time
    cout << "\nAlgorithm Elapsed Time: "
        << (double)(stopTime - startTime) / (double)CLOCKS_PER_SEC
        << " seconds." << endl << endl;
    return 0;
}

---------- OUTPUT ---------------
RUN 1:
Target time: 3600
Sublist -----------------------------
         sum:3600
array[0] = Cowboy Casanova by Carrie Underwood(236)
array[1] = Quitter by Carrie Underwood(220)
array[2] = Russian Roulette by Rihanna(228)
array[3] = Monkey Wrench by Foo Fighters(230)
array[4] = Pretending by Eric Clapton(283)
array[5] = Bad Love by Eric Clapton(308)
array[6] = Everybody's In The Mood by Howlin' Wolf(178)
array[7] = Well That's All Right by Howlin' Wolf(175)
array[8] = Samson and Delilah by Reverend Gary Davis(216)
array[9] = Hot Cha by Roy Buchanan(208)
array[10] = Green Onions by Roy Buchanan(443)
array[11] = I'm Just a Prisoner by Janiva Magness(230)
array[12] = You Were Never Mine by Janiva Magness(276)
array[13] = Hobo Blues by John Lee Hooker(187)
array[14] = I Can't Quit You Baby by John Lee Hooker(182)

Algorithm Elapsed Time: 3.238 seconds.

RUN 2:
Target time: 506
Sublist -----------------------------
         sum:506
array[0] = Monkey Wrench by Foo Fighters(230)
array[1] = You Were Never Mine by Janiva Magness(276)

Algorithm Elapsed Time: 0.009 seconds.

Run 3:
Target time: 1535
Sublist -----------------------------
         sum:1535
array[0] = Cowboy Casanova by Carrie Underwood(236)
array[1] = Quitter by Carrie Underwood(220)
array[2] = Russian Roulette by Rihanna(228)
array[3] = All My Life by Foo Fighters(263)
array[4] = Everybody's In The Mood by Howlin' Wolf(178)
array[5] = Samson and Delilah by Reverend Gary Davis(216)
array[6] = Twelve Sticks by Reverend Gary Davis(194)

Algorithm Elapsed Time: 0.059 seconds.

RUN THAT DOES NOT MEET TARGET:
Target time: 156
Sublist -----------------------------
         sum:155
array[0] = Ogeechee Hymnal by Blue Record(155)

Algorithm Elapsed Time: 0.007 seconds.

RUN WITH TARGET LARGER THAN SUM OF ALL ELEMENTS:
Target time: 32666
TARGET is larger than sum of entire list (22110).
